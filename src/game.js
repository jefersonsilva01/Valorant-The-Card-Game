function game() { const e = document.createElement("script"); e.setAttribute("src", "./src/lose.js"); const l = document.createElement("script"); l.setAttribute("src", "./src/home.js"); const t = document.getElementById("play"), s = document.getElementById("confirm"), n = document.getElementById("game-area"), a = document.getElementById("timer"), r = document.getElementById("input"), i = document.getElementById("modal-card"), c = document.getElementById("modal-card-title"), d = document.getElementById("modal-card-area"), o = document.getElementById("cards-player"), p = document.getElementById("score-player"), m = document.getElementById("player-turn"), u = document.getElementById("cards-cpu"), y = document.getElementById("score-cpu"), f = document.getElementById("cpu-turn"), k = ["CALAMITOUS", "LA CRIATURA", "HEIST", "PRESTIGE", "TRANQUIL"], v = document.querySelector("#game"), g = ["BG", "BG4"], T = g[Math.floor(Math.random() * g.length)]; let h, C, E, I = 0; const L = new CardGame(characters); function P() { 0 === I ? (m.classList.add("turn"), f.classList.remove("turn")) : 1 === I && (m.classList.remove("turn"), f.classList.add("turn")) } function x() { const e = document.querySelector(".card-flip-player"), l = (e, l, t) => e.style.setProperty(l, t), t = t => { let s = e.offsetWidth, n = t.pageX - e.offsetLeft, a = 5 * (.5 - (t.pageY - e.offsetTop) / s); l(e, "--dy", `${7 * -(.5 - n / s)}deg`), l(e, "--dx", `${a}deg`) }; e.addEventListener("mousemove", t, !1), e.addEventListener("mouseenter", t, !1), e.addEventListener("mouseleave", (() => { e.style.setProperty("--dy", "0"), e.style.setProperty("--dx", "0") }), !1) } function $(e, l) { const t = e[0], s = document.createElement("div"); s.classList.add(`card-flip-${l}-fliped`, `card-flip-${l}`); const a = document.createElement("div"); let r, i; a.classList.add("card-inner"), "player" === l && (s.onclick = () => s.classList.remove("card-flip-player-fliped")), r = `\n      <div id="${t.id}" class="card-${l}" style="background-image: url(${t.cover});">      \n        <img class="card-avatar-${l}" src="${t.avatar}" alt="${t.name}" />\n        <img class="info-${l}" src="./assets/images/info.svg">\n        <div class="card-info">\n          <span class="name">${t.name}</span>\n          <img class="class" src='${t.class}'>\n          <ul class="list-cards">\n            <li class="skill-${l}">\n              <span>ATTACK</span>\n              <span>${t.skills.attack}</span>\n            </li>\n            <li class="skill-${l}">\n              <span>DEFENSE</span>\n              <span>${t.skills.defense}</span>\n            </li>\n            <li class="skill-${l}">\n              <span>AGILITY</span>\n              <span>${t.skills.agility}</span>\n            </li>\n            <li class="skill-${l}">\n              <span>TECH</span>\n              <span>${t.skills.tech}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      `, i = '\n      <div \n        class="card-back" \n        style="background-image: url(\'./assets/images/BG card back 3.png\');">\n      </div>\n      ', a.innerHTML += '\n      <div \n        class="card-back" \n        style="background-image: url(\'./assets/images/BG card back 3.png\');">\n      </div>\n      ', a.innerHTML += r, s.appendChild(a), n.appendChild(s) } function S(e) { "player" === e ? document.querySelectorAll(`.skill-${e}`).forEach((e => { e.onclick = () => { p.innerText = e.children[1].innerText, L.skillsPlayer.name = e.children[0].innerText, L.skillsPlayer.skill = parseInt(e.children[1].innerText) } })) : "cpu" === e && document.querySelectorAll(`.skill-${e}`).forEach((e => { e.children[0].innerText === L.skillsPlayer.name && (L.skillsCPU.name = e.children[0].innerText, L.skillsCPU.skill = parseInt(e.children[1].innerText)) })) } function B() { y.innerText = "00", p.innerText = "00", o.innerText = L.PlayerCards.length, u.innerText = L.CPUCards.length } function q() { let e = document.querySelector(".card-flip-cpu"), l = document.querySelector(".card-flip-player"); e.classList.contains("card-flip-cpu-fliped") && e.classList.remove("card-flip-cpu-fliped"), l.classList.contains("card-flip-player-fliped") && l.classList.remove("card-flip-player-fliped"), y.innerText = L.skillsCPU.skill, p.innerText = L.skillsPlayer.skill, setTimeout((() => { e.classList.add("remove-cpu-left"), $(L.CPUCards, "cpu") }), 2e3), I = 1, setTimeout((() => { e.remove(), M(), P(), B(), b() }), 3e3) } function U() { let e = document.querySelector(".card-flip-player"); e.classList.contains("card-flip-player-fliped") && e.classList.remove("card-flip-player-fliped"), y.innerText = L.skillsCPU.skill, p.innerText = L.skillsPlayer.skill, setTimeout((() => { e.classList.add("remove-player-right"), $(L.PlayerCards, "player") }), 2e3), I = 0, setTimeout((() => { P(), B(), e.remove(), x(), M(), S("player") }), 3e3) } function A() { const l = L.gameEnded(); "player lose" === l ? (B(), E.pause(), fetch("./pages/lose.html").then((e => e.text())).then((e => app.innerHTML = e)), setTimeout((() => app.appendChild(e)), 1e3)) : "cpu lose" === l && (r.style.top = "30%", clearInterval(h), clearInterval(C), B()) } function b() { const e = parseInt(document.querySelector(".card-cpu").id), l = parseInt(document.querySelector(".card-player").id); let t, s = 0; L.CPUCards.forEach((l => { if (l.id === e) for (skillItem in l.skills) l.skills[skillItem] > s && l.skills[skillItem] <= 7 && (s = l.skills[skillItem], t = skillItem) })), L.skillsPlayer.name = t, L.skillsCPU.name = t, L.skillsCPU.skill = s, L.PlayerCards.forEach((e => { e.id === l && (L.skillsPlayer.skill = e.skills[t]) })); const n = L.compareSkills(); if ("playerWin" === n) q(); else if ("cpuWin" === n) U(); else { let e = document.querySelector(".card-flip-cpu"), l = document.querySelector(".card-flip-player"); l.classList.contains("card-flip-player-fliped") && l.classList.remove("card-flip-player-fliped"), e.classList.remove("card-flip-cpu-fliped"), y.innerText = L.skillsCPU.skill, p.innerText = L.skillsPlayer.skill, setTimeout((() => { e.classList.add("remove-cpu-right"), l.classList.add("remove-player-left"), $(L.CPUCards, "cpu"), $(L.PlayerCards, "player") }), 2e3), I = 0, setTimeout((() => { B(), e.remove(), l.remove(), S("player"), M(), M(), x(), P() }), 3e3) } setTimeout(A, 2500) } function M() { const e = document.querySelector(".info-player"), l = document.querySelector(".info-cpu"), t = parseInt(document.querySelector(".card-player").id), s = parseInt(document.querySelector(".card-cpu").id), n = document.createElement("div"); function a(e) { characters.forEach((l => { l.id === e && (n.innerText = l.bio, d.appendChild(n), c.innerText = l.name, i.style.display = "block") })) } function r() { i.style.display = "none", d.removeChild(d.lastElementChild) } n.setAttribute("id", "modal-card-content"), e.onmouseover = () => a(t), l.onmouseover = () => a(s), e.onmouseleave = () => r(), l.onmouseleave = () => r() } function G() { const e = k[Math.floor(Math.random() * k.length)]; E = new Audio(`./assets/audios/${e}.mp3`), E.volume = 1, E.addEventListener("ended", (() => G())), E.play() } L.shuffleCards(), L.getCards(), s.onclick = e => { e.preventDefault(); const t = document.getElementsByTagName("input")[0], s = a.innerText, n = { name: t.value, time: s }; t.value.length >= 3 && (leaders.unshift(n), r.style.top = "-100%", E.pause(), setTimeout((() => { fetch("./pages/home.html").then((e => e.text())).then((e => app.innerHTML = e)).then(app.appendChild(l)) }), 1e3)) }, t.onclick = e => { e.preventDefault(), function () { if (parseInt(p.innerText) > 0) { S("cpu"); const e = L.compareSkills(); if ("playerWin" === e) q(); else if ("cpuWin" === e) U(); else { let e = document.querySelector(".card-flip-cpu"), l = document.querySelector(".card-flip-player"); e.classList.remove("card-flip-cpu-fliped"), y.innerText = L.skillsCPU.skill, p.innerText = L.skillsPlayer.skill, setTimeout((() => { e.classList.add("remove-cpu-right"), l.classList.add("remove-player-left"), $(L.CPUCards, "cpu"), $(L.PlayerCards, "player"), x() }), 2e3), I = 1, setTimeout((() => { B(), e.remove(), l.remove(), M(), P(), b() }), 3e3) } setTimeout(A, 2500) } }() }, $(L.PlayerCards, "player"), x(), $(L.CPUCards, "cpu"), function () { let e = 0, l = 0; C = setInterval((() => e++), 1e3), h = setInterval((() => { l++; let t = e % 60 < 10 ? "0" + e % 60 : e % 60, s = Math.floor(e / 60) < 10 ? "0" + Math.floor(e / 60) : e / 60; a.innerText = `${s}:${t}.0${l % 10}` }), 100) }(), P(), B(), M(), S("player"), v.style.background = `url('./assets/images/${T}.png')`, v.classList.add("loaded"), G() } game();